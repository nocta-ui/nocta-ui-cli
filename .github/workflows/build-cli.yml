name: Build and Commit CLI Binaries

on:
  push:
    branches:
      - monorepo-support
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: nocta-ui
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary: nocta-ui
          - os: macos-13
            target: x86_64-apple-darwin
            binary: nocta-ui
          - os: macos-14
            target: aarch64-apple-darwin
            binary: nocta-ui
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: nocta-ui.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            binary: nocta-ui.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux cross linker
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure Linux ARM64 toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc-ar" >> $GITHUB_ENV
          echo "CFLAGS_aarch64_unknown_linux_gnu=-march=armv8-a" >> $GITHUB_ENV

      - name: Build CLI binary
        run: cargo build --release --package nocta_cli --target ${{ matrix.target }}

      - name: Stage binary in dist folder
        run: |
          mkdir -p js/dist/${{ matrix.target }}
          cp target/${{ matrix.target }}/release/${{ matrix.binary }} js/dist/${{ matrix.target }}/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: js/dist/${{ matrix.target }}/
          if-no-files-found: error

  commit-binaries:
    name: Commit built binaries to master
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: js/dist

      - name: List downloaded binaries
        run: ls -R js/dist

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push binaries
        run: |
          git add js/dist
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore: update built binaries [skip ci]"
          git push origin monorepo-support
